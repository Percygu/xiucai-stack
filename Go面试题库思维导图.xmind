<?xml version="1.0" encoding="UTF-8"?>
<xmap-content xmlns="urn:xmind:xmap:xmlns:content:2.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.0">
  <sheet id="sheet1" theme="classic">
    <topic id="root" structure-class="org.xmind.ui.logic.right">
      <title>Go面试题库</title>
      <children>
        <topics type="attached">
          <!-- 1. 基础面试题 -->
          <topic id="basic">
            <title>1. 基础面试题</title>
            <children>
              <topics type="attached">
                <topic id="basic-1">
                  <title>Go语言优势</title>
                  <children>
                    <topics type="attached">
                      <topic><title>语法简洁，开发效率高</title></topic>
                      <topic><title>并发优化，支持协程和GMP调度</title></topic>
                      <topic><title>代码可读性强，统一格式</title></topic>
                      <topic><title>高效垃圾回收机制</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-2">
                  <title>协程与线程进程区别</title>
                  <children>
                    <topics type="attached">
                      <topic><title>协程：用户态轻量级线程，2KB-4KB栈</title></topic>
                      <topic><title>线程：内核态，CPU调度基本单位</title></topic>
                      <topic><title>进程：系统资源分配最小单位</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-3">
                  <title>make vs new</title>
                  <children>
                    <topics type="attached">
                      <topic><title>make：初始化slice/map/channel，返回值</title></topic>
                      <topic><title>new：分配内存不初始化，返回指针</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-4">
                  <title>数组vs切片</title>
                  <children>
                    <topics type="attached">
                      <topic><title>数组：固定长度，值传递</title></topic>
                      <topic><title>切片：可变长度，引用传递，三个字段</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-5">
                  <title>字符串拼接</title>
                  <children>
                    <topics type="attached">
                      <topic><title>性能排序：strings.Join ≈ strings.Builder > bytes.Buffer > "+" > fmt.Sprintf</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-6">
                  <title>defer执行顺序</title>
                  <children>
                    <topics type="attached">
                      <topic><title>LIFO后进先出</title></topic>
                      <topic><title>有名返回值会被defer修改</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="basic-7">
                  <title>其他基础概念</title>
                  <children>
                    <topics type="attached">
                      <topic><title>rune类型：UTF-8字符，等价int32</title></topic>
                      <topic><title>struct tag：json/db/form/binding标签</title></topic>
                      <topic><title>空struct{}：不占内存，用于set/channel信号</title></topic>
                      <topic><title>init()函数：main前执行，包初始化</title></topic>
                      <topic><title>interface比较：类型和值都相同才相等</title></topic>
                      <topic><title>函数传参：只有值传递</title></topic>
                      <topic><title>逃逸分析：判断栈还是堆分配</title></topic>
                      <topic><title>多返回值：栈帧预留空间实现</title></topic>
                      <topic><title>unsafe.Pointer：通用指针类型</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 2. Slice面试题 -->
          <topic id="slice">
            <title>2. Slice面试题</title>
            <children>
              <topics type="attached">
                <topic id="slice-1">
                  <title>底层结构</title>
                  <children>
                    <topics type="attached">
                      <topic><title>array：指向底层数组</title></topic>
                      <topic><title>len：长度</title></topic>
                      <topic><title>cap：容量</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="slice-2">
                  <title>扩容机制</title>
                  <children>
                    <topics type="attached">
                      <topic><title>Go1.18前：小于1024翻倍，大于1024增加25%</title></topic>
                      <topic><title>Go1.18后：小于256翻倍，大于256按公式计算</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="slice-3">
                  <title>切片截取影响</title>
                  <children>
                    <topics type="attached">
                      <topic><title>未扩容：修改会影响原切片</title></topic>
                      <topic><title>已扩容：不会影响原切片</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="slice-4">
                  <title>函数参数传递</title>
                  <children>
                    <topics type="attached">
                      <topic><title>slice结构不变，底层数组可能变</title></topic>
                      <topic><title>传指针才能改变slice结构</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 3. Map面试题 -->
          <topic id="map">
            <title>3. Map面试题</title>
            <children>
              <topics type="attached">
                <topic id="map-1">
                  <title>底层实现</title>
                  <children>
                    <topics type="attached">
                      <topic><title>hmap结构：buckets数组+溢出桶</title></topic>
                      <topic><title>bmap：存储8个键值对+tophash</title></topic>
                      <topic><title>哈希表+链表解决冲突</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="map-2">
                  <title>遍历特性</title>
                  <children>
                    <topics type="attached">
                      <topic><title>无序遍历：随机起始位置</title></topic>
                      <topic><title>有序遍历：先排序key再遍历</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="map-3">
                  <title>并发安全</title>
                  <children>
                    <topics type="attached">
                      <topic><title>非并发安全：检测写标志panic</title></topic>
                      <topic><title>解决方案：sync.RWMutex或sync.Map</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="map-4">
                  <title>扩容机制</title>
                  <children>
                    <topics type="attached">
                      <topic><title>装载因子>6.5：双倍扩容</title></topic>
                      <topic><title>溢出桶过多：等量扩容</title></topic>
                      <topic><title>渐进式扩容：分摊到多次操作</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="map-5">
                  <title>其他特性</title>
                  <children>
                    <topics type="attached">
                      <topic><title>Key必须可比较</title></topic>
                      <topic><title>不能取地址：扩容会改变位置</title></topic>
                      <topic><title>删除不释放内存：标记删除</title></topic>
                      <topic><title>可以边遍历边删除（单协程）</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 4. Channel面试题 -->
          <topic id="channel">
            <title>4. Channel面试题</title>
            <children>
              <topics type="attached">
                <topic id="channel-1">
                  <title>CSP模型</title>
                  <children>
                    <topics type="attached">
                      <topic><title>通信顺序进程</title></topic>
                      <topic><title>通过通信共享内存</title></topic>
                      <topic><title>避免共享内存通信</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="channel-2">
                  <title>底层实现hchan</title>
                  <children>
                    <topics type="attached">
                      <topic><title>环形缓冲区：buf+sendx+recvx</title></topic>
                      <topic><title>等待队列：sendq+recvq</title></topic>
                      <topic><title>互斥锁：保证并发安全</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="channel-3">
                  <title>发送接收过程</title>
                  <children>
                    <topics type="attached">
                      <topic><title>发送：检查接收者→缓冲区→阻塞等待</title></topic>
                      <topic><title>接收：检查发送者→缓冲区→阻塞等待</title></topic>
                      <topic><title>关闭channel：可读取剩余数据</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="channel-4">
                  <title>select机制</title>
                  <children>
                    <topics type="attached">
                      <topic><title>多路复用：同时监听多个channel</title></topic>
                      <topic><title>随机选择：避免饥饿问题</title></topic>
                      <topic><title>实现原理：case随机化+双重循环</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="channel-5">
                  <title>注意事项</title>
                  <children>
                    <topics type="attached">
                      <topic><title>关闭已关闭channel会panic</title></topic>
                      <topic><title>向关闭channel发送会panic</title></topic>
                      <topic><title>channel泄漏导致内存泄漏</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 5. Sync面试题 -->
          <topic id="sync">
            <title>5. Sync面试题</title>
            <children>
              <topics type="attached">
                <topic id="sync-1">
                  <title>并发安全方式</title>
                  <children>
                    <topics type="attached">
                      <topic><title>Mutex：互斥锁</title></topic>
                      <topic><title>Channel：通信共享</title></topic>
                      <topic><title>atomic：原子操作</title></topic>
                      <topic><title>信号量：计数控制</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="sync-2">
                  <title>Mutex实现</title>
                  <children>
                    <topics type="attached">
                      <topic><title>state+sema：状态位+信号量</title></topic>
                      <topic><title>正常模式：性能优先，可能不公平</title></topic>
                      <topic><title>饥饿模式：公平优先，等待>1ms触发</title></topic>
                      <topic><title>自旋优化：短时间等待避免挂起</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="sync-3">
                  <title>原子操作vs锁</title>
                  <children>
                    <topics type="attached">
                      <topic><title>原子操作：CPU硬件指令，单个数据</title></topic>
                      <topic><title>锁：操作系统机制，代码块保护</title></topic>
                      <topic><title>性能：原子操作 > 锁</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="sync-4">
                  <title>sync.Once</title>
                  <children>
                    <topics type="attached">
                      <topic><title>确保函数只执行一次</title></topic>
                      <topic><title>done标志位+Mutex</title></topic>
                      <topic><title>双重检查锁定模式</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="sync-5">
                  <title>WaitGroup</title>
                  <children>
                    <topics type="attached">
                      <topic><title>协程等待：Add/Done/Wait</title></topic>
                      <topic><title>原子计数器+信号量</title></topic>
                      <topic><title>state：高32位计数+低32位等待者</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="sync-6">
                  <title>sync.Map</title>
                  <children>
                    <topics type="attached">
                      <topic><title>读写分离：read map + dirty map</title></topic>
                      <topic><title>适用场景：读多写少</title></topic>
                      <topic><title>删除状态：nil + expunged</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 6. Context面试题 -->
          <topic id="context">
            <title>6. Context面试题</title>
            <children>
              <topics type="attached">
                <topic id="context-1">
                  <title>Context定义</title>
                  <children>
                    <topics type="attached">
                      <topic><title>接口：Deadline/Done/Err/Value</title></topic>
                      <topic><title>信号传递和范围控制工具</title></topic>
                      <topic><title>传递取消信号、超时、截止时间</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="context-2">
                  <title>主要作用</title>
                  <children>
                    <topics type="attached">
                      <topic><title>超时控制：WithTimeout/WithDeadline</title></topic>
                      <topic><title>取消信号传播：父子Context级联</title></topic>
                      <topic><title>请求级数据传递：WithValue</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="context-3">
                  <title>Value查找过程</title>
                  <children>
                    <topics type="attached">
                      <topic><title>链式递归查找</title></topic>
                      <topic><title>从当前Context向父Context查找</title></topic>
                      <topic><title>直到找到key或到达根Context</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="context-4">
                  <title>取消机制</title>
                  <children>
                    <topics type="attached">
                      <topic><title>主动取消：调用cancel函数</title></topic>
                      <topic><title>超时取消：定时器自动触发</title></topic>
                      <topic><title>级联取消：父Context取消传播</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 7. Interface面试题 -->
          <topic id="interface">
            <title>7. Interface面试题</title>
            <children>
              <topics type="attached">
                <topic id="interface-1">
                  <title>底层原理</title>
                  <children>
                    <topics type="attached">
                      <topic><title>eface：空接口，_type+data</title></topic>
                      <topic><title>iface：非空接口，itab+data</title></topic>
                      <topic><title>itab：接口类型+具体类型+方法表</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="interface-2">
                  <title>类型转换vs断言</title>
                  <children>
                    <topics type="attached">
                      <topic><title>类型转换：编译期确定，T(value)</title></topic>
                      <topic><title>类型断言：运行期检查，value.(T)</title></topic>
                      <topic><title>安全断言：value, ok := x.(T)</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="interface-3">
                  <title>应用场景</title>
                  <children>
                    <topics type="attached">
                      <topic><title>依赖注入和解耦</title></topic>
                      <topic><title>多态实现</title></topic>
                      <topic><title>标准库统一API</title></topic>
                      <topic><title>插件化架构</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="interface-4">
                  <title>比较规则</title>
                  <children>
                    <topics type="attached">
                      <topic><title>动态类型和动态值都相同才相等</title></topic>
                      <topic><title>不可比较类型会panic</title></topic>
                      <topic><title>nil比较：类型和值都为nil</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 8. 反射面试题 -->
          <topic id="reflect">
            <title>8. 反射面试题</title>
            <children>
              <topics type="attached">
                <topic id="reflect-1">
                  <title>反射定义</title>
                  <children>
                    <topics type="attached">
                      <topic><title>运行时访问、检测、修改程序状态</title></topic>
                      <topic><title>程序观察和修改自己的行为</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="reflect-2">
                  <title>实现原理</title>
                  <children>
                    <topics type="attached">
                      <topic><title>通过接口实现：类型信息+数据指针</title></topic>
                      <topic><title>reflect.TypeOf：获取类型信息</title></topic>
                      <topic><title>reflect.ValueOf：获取值信息</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="reflect-3">
                  <title>应用场景</title>
                  <children>
                    <topics type="attached">
                      <topic><title>JSON序列化：encoding/json</title></topic>
                      <topic><title>ORM框架：GORM字段映射</title></topic>
                      <topic><title>Web框架：参数绑定</title></topic>
                      <topic><title>配置解析：Viper</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="reflect-4">
                  <title>对象比较</title>
                  <children>
                    <topics type="attached">
                      <topic><title>reflect.DeepEqual：深度比较</title></topic>
                      <topic><title>==操作符：简单类型比较</title></topic>
                      <topic><title>自定义Equal方法：业务需求</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 9. GMP面试题 -->
          <topic id="gmp">
            <title>9. GMP面试题</title>
            <children>
              <topics type="attached">
                <topic id="gmp-1">
                  <title>GMP模型</title>
                  <children>
                    <topics type="attached">
                      <topic><title>G：goroutine协程</title></topic>
                      <topic><title>M：machine系统线程</title></topic>
                      <topic><title>P：processor逻辑处理器</title></topic>
                      <topic><title>work-stealing：工作窃取机制</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gmp-2">
                  <title>调度策略</title>
                  <children>
                    <topics type="attached">
                      <topic><title>Go1.14前：协作式抢占</title></topic>
                      <topic><title>Go1.14后：基于信号异步抢占</title></topic>
                      <topic><title>sysmon：系统监控线程</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gmp-3">
                  <title>调度时机</title>
                  <children>
                    <topics type="attached">
                      <topic><title>channel读写阻塞</title></topic>
                      <topic><title>time.Sleep等待</title></topic>
                      <topic><title>互斥量等待</title></topic>
                      <topic><title>系统调用</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gmp-4">
                  <title>M寻找G过程</title>
                  <children>
                    <topics type="attached">
                      <topic><title>本地队列LRQ：优先检查</title></topic>
                      <topic><title>全局队列GRQ：需要加锁</title></topic>
                      <topic><title>网络轮询器netpoll：IO就绪</title></topic>
                      <topic><title>工作窃取：从其他P偷取</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gmp-5">
                  <title>特殊概念</title>
                  <children>
                    <topics type="attached">
                      <topic><title>m0：主线程，程序启动</title></topic>
                      <topic><title>g0：调度协程，每个M都有</title></topic>
                      <topic><title>P创建：初始化时一次性创建</title></topic>
                      <topic><title>M创建：按需创建</title></topic>
                      <topic><title>栈切换：SP寄存器切换</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 10. 内存管理面试题 -->
          <topic id="memory">
            <title>10. 内存管理面试题</title>
            <children>
              <topics type="attached">
                <topic id="memory-1">
                  <title>内存分配架构</title>
                  <children>
                    <topics type="attached">
                      <topic><title>TCMalloc算法改进版</title></topic>
                      <topic><title>mcache：线程缓存，每个P独有</title></topic>
                      <topic><title>mcentral：中央缓存，按大小分类</title></topic>
                      <topic><title>mheap：页堆，从OS申请内存</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="memory-2">
                  <title>对象分类分配</title>
                  <children>
                    <topics type="attached">
                      <topic><title>微小对象(&lt;16字节)：tiny分配器</title></topic>
                      <topic><title>小对象(16字节-32KB)：size class机制</title></topic>
                      <topic><title>大对象(&gt;32KB)：直接从mheap分配</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="memory-3">
                  <title>内存逃逸</title>
                  <children>
                    <topics type="attached">
                      <topic><title>定义：栈对象分配到堆上</title></topic>
                      <topic><title>场景：返回指针、interface{}、闭包、大对象</title></topic>
                      <topic><title>影响：增加GC压力</title></topic>
                      <topic><title>检测：go build -gcflags '-m'</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="memory-4">
                  <title>内存泄漏</title>
                  <children>
                    <topics type="attached">
                      <topic><title>goroutine泄漏：最常见</title></topic>
                      <topic><title>channel泄漏：未关闭channel</title></topic>
                      <topic><title>slice引用大数组</title></topic>
                      <topic><title>map元素过多不缩减</title></topic>
                      <topic><title>定时器未停止</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="memory-5">
                  <title>定位和优化</title>
                  <children>
                    <topics type="attached">
                      <topic><title>pprof：内存分析工具</title></topic>
                      <topic><title>trace：goroutine生命周期</title></topic>
                      <topic><title>runtime统计：内存使用趋势</title></topic>
                      <topic><title>优化：context超时、及时关闭、copy独立</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>

          <!-- 11. 垃圾回收面试题 -->
          <topic id="gc">
            <title>11. 垃圾回收面试题</title>
            <children>
              <topics type="attached">
                <topic id="gc-1">
                  <title>GC算法类型</title>
                  <children>
                    <topics type="attached">
                      <topic><title>标记清扫：标记存活对象并清扫</title></topic>
                      <topic><title>标记整理：解决内存碎片</title></topic>
                      <topic><title>增量式：分批执行，近似实时</title></topic>
                      <topic><title>分代式：按存活时间分类</title></topic>
                      <topic><title>引用计数：引用归零立即回收</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gc-2">
                  <title>Go GC特点</title>
                  <children>
                    <topics type="attached">
                      <topic><title>无分代：对象无代际之分</title></topic>
                      <topic><title>不整理：不移动对象</title></topic>
                      <topic><title>并发：与用户代码并发执行</title></topic>
                      <topic><title>三色标记清扫算法</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gc-3">
                  <title>三色标记法</title>
                  <children>
                    <topics type="attached">
                      <topic><title>白色：未访问，待回收</title></topic>
                      <topic><title>灰色：已访问，引用未扫描完</title></topic>
                      <topic><title>黑色：已访问，引用已扫描完</title></topic>
                      <topic><title>根对象：全局变量、栈变量、寄存器</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gc-4">
                  <title>并发标记难点</title>
                  <children>
                    <topics type="attached">
                      <topic><title>对象消失问题：黑色指向白色</title></topic>
                      <topic><title>写屏障技术：指针赋值时插入逻辑</title></topic>
                      <topic><title>混合写屏障：结合插入和删除写屏障</title></topic>
                      <topic><title>三色不变性：维护标记正确性</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gc-5">
                  <title>GC流程</title>
                  <children>
                    <topics type="attached">
                      <topic><title>SweepTermination：清扫终止，启动写屏障</title></topic>
                      <topic><title>Mark：并发标记阶段</title></topic>
                      <topic><title>MarkTermination：标记终止，停止写屏障</title></topic>
                      <topic><title>GCoff：内存清扫和归还</title></topic>
                    </topics>
                  </children>
                </topic>
                <topic id="gc-6">
                  <title>GC触发和调优</title>
                  <children>
                    <topics type="attached">
                      <topic><title>触发：主动runtime.GC()、内存增长、2分钟强制</title></topic>
                      <topic><title>指标：CPU利用率、停顿时间、停顿频率</title></topic>
                      <topic><title>调优：合理分配、内存复用、调整GOGC</title></topic>
                      <topic><title>观察：GODEBUG=gctrace=1</title></topic>
                    </topics>
                  </children>
                </topic>
              </topics>
            </children>
          </topic>
        </topics>
      </children>
    </topic>
  </sheet>
</xmap-content>
