import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as s}from"./app-DnLzMSw7.js";const a="/assets/image-1-BtDgMSRs.png",o="/assets/image-zxGmi0mr.png",l="/assets/image-2-DgPophdM.png",r={};function h(c,t){return s(),i("div",null,t[0]||(t[0]=[n(`<h1 id="context面试题" tabindex="-1"><a class="header-anchor" href="#context面试题"><span>Context面试题</span></a></h1><h2 id="_1-go语言里的context是什么" tabindex="-1"><a class="header-anchor" href="#_1-go语言里的context是什么"><span>1. Go语言里的Context是什么？</span></a></h2><p>go语言里的context实际上是一个接口，提供了Deadline()，Done()，Err()以及Value()四种方法。它在Go 1.7 标准库被引入。</p><p>它本质上是一个<strong>信号传递和范围控制的工具</strong>。它的核心作用是在一个请求处理链路中（跨越多个函数和goroutine），优雅地传递<strong>取消信号（cancellation）、超时（timeout）和截止日期（deadline）</strong>，并能携带一些范围内的键值对数据。</p><p><strong>分析</strong></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Deadline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">deadline</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ok</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Deadline方法的第一个返回值表示还有多久到            期， 第二个返回值代表是否被超时时间控制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Done() 返回一个 只读channel，当这个channel被关闭时，说明这个            context被取消</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // Err() 返回一个错误，表示channel被关闭的原因，例如是被取消，还是超时关闭</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// value方法返回指定key对应的value，这是context携带           的值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口定义了四个核心方法，它们共同构成了一套关于<strong>截止时间、取消信号和请求范围值</strong>的协定：</p><ul><li><p><code>Deadline()</code> - 返回一个时间点，告知任务何时应该被取消。</p></li><li><p><code>Done()</code> - 返回一个channel，当<code>Context</code>被取消或超时，这个channel会被关闭。这是goroutine监听取消信号的核心。</p></li><li><p><code>Err()</code> - 在<code>Done()</code>的channel关闭后，它会解释关闭的原因，是主动取消（<code>Canceled</code>）还是超时（<code>DeadlineExceeded</code>）。</p></li><li><p><code>Value()</code> - 允许<code>Context</code>在调用链中携带请求范围的键值对数据。</p></li></ul><h2 id="_2-go语言的context有什么作用" tabindex="-1"><a class="header-anchor" href="#_2-go语言的context有什么作用"><span>2. Go语言的Context有什么作用？</span></a></h2><p>Go的Context主要解决三个核心问题：<strong>超时控制、取消信号传播和请求级数据传递</strong></p><p>在实际项目中，我们最常用的是超时控制。比如一个HTTP请求需要调用多个下游服务，我们通过<code>context.WithTimeout</code>设置整体超时时间，当超时发生时，所有子操作都会收到取消信号并立即退出，避免资源浪费。取消信号的传播是通过Context的层级结构实现的，父Context取消时，所有子Context都会自动取消。</p><p>另外Context还能传递请求级的元数据，比如用户ID、请求ID等，这在分布式链路追踪中特别有用。需要注意的是，Context应该作为函数的第一个参数传递，不要存储在结构体中，并且传递的数据应该是请求级别的，不要滥用。</p><figure><img src="`+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-context-value的查找过程是怎样的" tabindex="-1"><a class="header-anchor" href="#_3-context-value的查找过程是怎样的"><span>3. Context.Value的查找过程是怎样的</span></a></h2><p>Context.Value的查找过程是一个<strong>链式递归查找的过程</strong>，从当前Context开始，沿着父Context链一直向上查找直到找到对应的key或者到达根Context。</p><p>具体流程是：当调用<code>ctx.Value(key)</code>时，首先检查当前Context是否包含这个key，如果当前层没有，就会调用<code>parent.Value(key)</code>继续向上查找。这个过程会一直递归下去，直到找到匹配的key返回对应的value，或者查找到根Context返回nil。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-context如何被取消" tabindex="-1"><a class="header-anchor" href="#_4-context如何被取消"><span>4. Context如何被取消</span></a></h2><p>Context的取消是通过<strong>channel关闭信号</strong>实现的，主要有三种取消方式。</p><p>首先是<strong>主动取消</strong>，通过<code>context.WithCancel</code>创建的Context会返回一个cancel函数，调用这个函数就会关闭内部的done channel，所有监听这个Context的goroutine都能通过<code>ctx.Done()</code>收到取消信号。</p><p>其次是<strong>超时取消</strong>，<code>context.WithTimeout</code>和<code>context.WithDeadline</code>会启动一个定时器，到达指定时间后自动调用cancel函数触发取消。</p><p>最后是<strong>级联取消</strong>，当父Context被取消时，所有子Context会自动被取消，这是通过Context树的结构实现的。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23)]))}const g=e(r,[["render",h],["__file","Context面试题.html.vue"]]),k=JSON.parse('{"path":"/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/Context%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Context面试题","lang":"zh-CN","frontmatter":{"tags":["Go","golang","context","面试题","context面试题"],"description":"Context面试题 1. Go语言里的Context是什么？ go语言里的context实际上是一个接口，提供了Deadline()，Done()，Err()以及Value()四种方法。它在Go 1.7 标准库被引入。 它本质上是一个信号传递和范围控制的工具。它的核心作用是在一个请求处理链路中（跨越多个函数和goroutine），优雅地传递取消信号（...","head":[["meta",{"property":"og:url","content":"https://xiucaistack.cn/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/Context%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"秀才的进阶之路"}],["meta",{"property":"og:title","content":"Context面试题"}],["meta",{"property":"og:description","content":"Context面试题 1. Go语言里的Context是什么？ go语言里的context实际上是一个接口，提供了Deadline()，Done()，Err()以及Value()四种方法。它在Go 1.7 标准库被引入。 它本质上是一个信号传递和范围控制的工具。它的核心作用是在一个请求处理链路中（跨越多个函数和goroutine），优雅地传递取消信号（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T15:42:17.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"context"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:tag","content":"context面试题"}],["meta",{"property":"article:modified_time","content":"2025-06-26T15:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Context面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-26T15:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"秀才\\",\\"url\\":\\"https://github.com/Percygu\\"}]}"]]},"headers":[{"level":2,"title":"1. Go语言里的Context是什么？","slug":"_1-go语言里的context是什么","link":"#_1-go语言里的context是什么","children":[]},{"level":2,"title":"2. Go语言的Context有什么作用？","slug":"_2-go语言的context有什么作用","link":"#_2-go语言的context有什么作用","children":[]},{"level":2,"title":"3. Context.Value的查找过程是怎样的","slug":"_3-context-value的查找过程是怎样的","link":"#_3-context-value的查找过程是怎样的","children":[]},{"level":2,"title":"4. Context如何被取消","slug":"_4-context如何被取消","link":"#_4-context如何被取消","children":[]}],"git":{"createdTime":1750952537000,"updatedTime":1750952537000,"contributors":[{"name":"gupeng","username":"gupeng","email":"380059082@qq.com","commits":1,"url":"https://github.com/gupeng"}]},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"Go语言系列/Go面试题库/Context面试题.md","localizedDate":"2025年6月26日","autoDesc":true}');export{g as comp,k as data};
