import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as o,o as i}from"./app-DJgFtDFQ.js";const n="/assets/%E5%B9%B6%E5%8F%91%E6%A6%82%E8%BF%B01-CeyF7gOi.png",r="/assets/%E5%B9%B6%E5%8F%91%E6%A6%82%E8%BF%B02-Jbs_zu0a.png",p={};function c(l,t){return i(),a("div",null,t[0]||(t[0]=[o('<h1 id="并发概述" tabindex="-1"><a class="header-anchor" href="#并发概述"><span>并发概述</span></a></h1><h2 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h2><p>谈到并发或者并行一个绕不开的话题就是进程和线程，弄清楚进程与线程的本质是并发编程的前提，那么究竟什么是进程，什么是线程呢？<br> 可以这样理解：</p><ul><li>进程就是运行着的程序，它是程序在操作系统的一次执行过程，是一个程序的动态概念，进程是操作系统分配资源的基本单位</li><li>线程可以理解为一个进程的执行实体，它是比进程粒度更小的执行单元，也是真正运行在cpu上的执行单元，线程是CPU调度资源的基本单位<br> 进程中可以包含多个线程，需要记住进程和线程一个是操作系统分配资源的基本单位(进程)，一个是操作系统调度资源的基本单位(线程)</li></ul><h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程"><span>协程</span></a></h2><p>协程可以理解为用户态线程，是更微量级的线程。区别于线程，协程的调度在用户态进行，不需要切换到内核态，所以不由操作系统参与，由用户自己控制。在一些支持协程高级语言中，往往这些语言都实现了自己的协程调度器，比如go语言就有自己的协程调度器，这个会在后面专门讲协程调度原理的时候讲。</p><ul><li>协程有独立的栈空间，但是共享堆空间。</li><li>一个进程上可以跑多个线程，一个线程上可以跑多个协程</li></ul><h2 id="并发与并行" tabindex="-1"><a class="header-anchor" href="#并发与并行"><span>并发与并行</span></a></h2><p>很多时候大家对于并行和并发的概念还比较模糊，其实只需要根据一点来判断即可，能不能同时运行。两个任务能同时运行就是并行，不能同时运行，而是每个任务执行一小段，交叉执行，这种模式就是并发。</p><figure><img src="'+n+'" alt="并行" tabindex="0" loading="lazy"><figcaption>并行</figcaption></figure><figure><img src="'+r+'" alt="并发" tabindex="0" loading="lazy"><figcaption>并发</figcaption></figure><p>如图（并行）所示，两个任务一直运行，切实同时运行着，这就是并行模式，要注意并行的话一定要有多个核的支持，因为只有一个cpu的话，同一时间只能跑一个任务，如图（并发）所示，两个任务，每次只执行一小段，这样交叉的执行，就是并发模式，并发模式在单核cpu上是可以完成的</p>',12)]))}const m=e(p,[["render",c],["__file","并发概述.html.vue"]]),d=JSON.parse('{"path":"/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6/%E5%B9%B6%E5%8F%91%E6%A6%82%E8%BF%B0.html","title":"并发概述","lang":"zh-CN","frontmatter":{"tags":["Go","golang","go基础语法","并发概述"],"description":"并发概述 进程与线程 谈到并发或者并行一个绕不开的话题就是进程和线程，弄清楚进程与线程的本质是并发编程的前提，那么究竟什么是进程，什么是线程呢？ 可以这样理解： 进程就是运行着的程序，它是程序在操作系统的一次执行过程，是一个程序的动态概念，进程是操作系统分配资源的基本单位 线程可以理解为一个进程的执行实体，它是比进程粒度更小的执行单元，也是真正运行在c...","head":[["meta",{"property":"og:url","content":"https://xiucaistack.cn/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6/%E5%B9%B6%E5%8F%91%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"秀才的进阶之路"}],["meta",{"property":"og:title","content":"并发概述"}],["meta",{"property":"og:description","content":"并发概述 进程与线程 谈到并发或者并行一个绕不开的话题就是进程和线程，弄清楚进程与线程的本质是并发编程的前提，那么究竟什么是进程，什么是线程呢？ 可以这样理解： 进程就是运行着的程序，它是程序在操作系统的一次执行过程，是一个程序的动态概念，进程是操作系统分配资源的基本单位 线程可以理解为一个进程的执行实体，它是比进程粒度更小的执行单元，也是真正运行在c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T16:50:20.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go基础语法"}],["meta",{"property":"article:tag","content":"并发概述"}],["meta",{"property":"article:modified_time","content":"2025-02-13T16:50:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-13T16:50:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"秀才\\",\\"url\\":\\"https://github.com/Percygu\\"}]}"]]},"headers":[{"level":2,"title":"进程与线程","slug":"进程与线程","link":"#进程与线程","children":[]},{"level":2,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":2,"title":"并发与并行","slug":"并发与并行","link":"#并发与并行","children":[]}],"git":{"createdTime":1739465420000,"updatedTime":1739465420000,"contributors":[{"name":"gupeng","username":"gupeng","email":"380059082@qq.com","commits":1,"url":"https://github.com/gupeng"}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"Go语言系列/Go语言进阶/并发概述.md","localizedDate":"2025年2月14日","autoDesc":true}');export{m as comp,d as data};
