import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as l}from"./app-DnLzMSw7.js";const n="/assets/go%E5%AE%89%E8%A3%853-DCntPcmk.png",t="/assets/go%E5%AE%89%E8%A3%854-BbUDsFFO.png",o="/assets/go%E5%AE%89%E8%A3%852-Dj6DzmVI.png",r="/assets/go%E5%AE%89%E8%A3%855-nWXrV6-f.png",h="/assets/go%E5%AE%89%E8%A3%856-BWdn66ri.png",d="/assets/go%E5%AE%89%E8%A3%857-CKJFr972.png",g="/assets/go%E5%AE%89%E8%A3%858-DZpBONCf.png",p="/assets/go%E5%AE%89%E8%A3%859-C0X5IOTg.png",c="/assets/go%E5%AE%89%E8%A3%8510-DVhtsCwA.png",k="/assets/go%E5%AE%89%E8%A3%8511-D2vBoaHj.png",u="/assets/go%E5%AE%89%E8%A3%8512-IUPDDs_7.png",m="/assets/go%E5%AE%89%E8%A3%8513-Df8hjMGX.png",A="/assets/go%E5%AE%89%E8%A3%8514-B3dbSFMZ.png",b="/assets/go%E5%AE%89%E8%A3%8515-D4AQ--9f.png",f="/assets/go%E5%AE%89%E8%A3%8516-0rTpfJc4.png",v="/assets/go%E5%AE%89%E8%A3%8517-CAxD047E.png",y="/assets/go%E5%AE%89%E8%A3%8518-rfJKHcBN.png",E="/assets/go%E5%AE%89%E8%A3%8519-COlfR7Sf.png",_={};function F(G,i){return l(),a("div",null,i[0]||(i[0]=[e('<h1 id="go环境搭建" tabindex="-1"><a class="header-anchor" href="#go环境搭建"><span>Go环境搭建</span></a></h1><p>Golang是云原生时代的宠儿，它最大的优点在于简单有效，简单在于上手迅速、代码规范、部署方便；有效在于它能很容易写出高并发的代码，处理能力强。<br> Golang能适用于web后台、数据库、云原生、区块链等大多数场景，大厂与其相关的招聘岗位也在逐年增加，因此，学习Golang这样相对较新、发展前景很好的语言，我们是可以实现弯道超车的。<br> 本文环境安装部分，每个步骤都贴出了执行命令，希望小伙伴们读完此文，自己动手安装Go环境，实现快速入门，用Golang开启新的旅程。<br> 下面我们就从最基础的环境部署开始，开启我们的Golang之旅吧~</p><h2 id="_1-安装golang" tabindex="-1"><a class="header-anchor" href="#_1-安装golang"><span>1. 安装Golang</span></a></h2><p>Go语言可以运行在Linux，Windows以及Mac系统上，对于开发者而言，一般是在本地Windows或者Mac上开发，然后将Go服务部署到Linux上去运行，所以在安装上来说的话，会这三个平台的安装就可以了。<br> 下面将分别介绍这三个平台的安装方式。Go语言官方安装包地址：<a href="https://golang.org/dl/" target="_blank" rel="noopener noreferrer">https://golang.org/dl/</a>大家可以上去选择自己需要的版本，通常来说选择次新版本即可，下面的演示选择的是go1.22.10版本</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>打开<a href="https://go.dev/doc/install" target="_blank" rel="noopener noreferrer">https://go.dev/doc/install</a>可以看到各个系统下的安装介绍</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-1-linux-安装方式" tabindex="-1"><a class="header-anchor" href="#_1-1-linux-安装方式"><span>1.1 Linux 安装方式</span></a></h3><ol><li>下载安装包下载安装包到当前目录，这里以go1.22.10为例</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://go.dev/dl/go1.22.10.linux-arm64.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>将go压缩包解压到指定目录,Linux环境下一般解压到/usr/local目录下</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/go</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xzf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> go1.16.2.linux-amd64.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>设置环境变量PATH<br> Linux下有两个文件可以配置环境变量，/etc/profile文件配置所有用户生效；$HOME/.profile对当前用户生效，为了简单起见，选择/etc/profile配置就可以了。<br> 当然如果</li><li>根据自己的情况自行选择一个文件打开，添加如下两行代码，保存退出。</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">go</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>检查Go版本</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>检查Go的版本，如果执行上述命令能够成功显示go的版本，则说明Go环境安装成功</p><h3 id="_1-2-mac安装" tabindex="-1"><a class="header-anchor" href="#_1-2-mac安装"><span>1.2 Mac安装</span></a></h3><p>Mac系统下的安装就很简单了，直接选择对应版本的安装包，图形界面下直接点击下一步可视化安装就好了</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3-windows安装" tabindex="-1"><a class="header-anchor" href="#_1-3-windows安装"><span>1.3 Windows安装</span></a></h3><p>Windows系统的安装和Mac一样简单，也是直接点击安装包进入安装界面，图形话安装即可。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-goproxy设置" tabindex="-1"><a class="header-anchor" href="#_1-4-goproxy设置"><span>1.4 GOPROXY设置</span></a></h3><p>Go1.14版本之后，推荐使用go mod模式来管理依赖，GOPROXY是Go语言官方提供的一种通过中间代理商来为用户提供依赖包下载服务的方式，它的值是一个以英文逗号“,”分割的 Go module proxy 列表。<br> 它的默认值是：<a href="https://proxy.golang.org" target="_blank" rel="noopener noreferrer">https://proxy.golang.org</a>,direct，但是在国内可能会存在下载慢或者无法访问的情况，所以我们需要换一个PROXY，这里推荐使用<a href="https://goproxy.cn" target="_blank" rel="noopener noreferrer">https://goproxy.cn</a>。执行以下命令更改GOPROXY设置即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> go env -w GOPROXY=https://goproxy.cn,direct</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意, 后面有两个选项：direce和off。设置为 “off” 表示禁止Go在后续操作中使用任何Go module proxy，“direct” 为特殊指示符，表示Go模块下载的备选方案或回退选项，这里配置了direct后，<br> 当下载依赖包时，首先从代理站点<a href="https://proxy.golang.xn--org-128dq51c820eiskova" target="_blank" rel="noopener noreferrer">https://proxy.golang.org处进行下载</a>，如果下载失败，则会回退到direct，直接从代码源下载，所以一般最后逗号后都会加上direct。<br> 设置完GOPROXY之后，通过<code>go env</code>命令查看</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-5-goprivate设置" tabindex="-1"><a class="header-anchor" href="#_1-5-goprivate设置"><span>1.5 GOPRIVATE设置</span></a></h3><p>前面的GOPROXY设置后，G程序拉取依赖都会走代理，有时候我们的程序开发需要拉取一些内部的私有依赖，比如公司或者小组内开发的公共组件，这些依赖没有对外公开，在外部的代理站点拉取不到。<br> 我们希望可以不走代理，直接下载。所以就需要配置GOPRIVATE环境变量。比如配置了以下GOPRIVATE</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go env -w GOPRIVATE=&quot;*.gitee.cn&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么Go程序在拉取gitee.cn上的依赖包，就会绕过代理直接下载，不会去GOPROXY中的代理站点下载；而其他的依赖包则会去GOPROXY中的代理站点下载.<br> 设置完GOPROXY之后，通过<code>go env</code>命令查看</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-go开发编辑器" tabindex="-1"><a class="header-anchor" href="#_2-go开发编辑器"><span>2. Go开发编辑器</span></a></h2><h3 id="_2-1-goland安装" tabindex="-1"><a class="header-anchor" href="#_2-1-goland安装"><span>2.1 Goland安装</span></a></h3><p>Go语言推荐使用GoLand在本地进行开发，Goland是Jetbrains家族出品，有强大的Plugin，代码跳转，自动格式化，错误检测等用起来都十分方便</p><p>GoLand下载官网地址: <a href="https://www.jetbrains.com/go/download/%EF%BC%8C" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/go/download/，</a> 根据操作系统选择对应包下载安装即可<br><img src="'+g+'" alt="" loading="lazy"></p><h3 id="_2-2-goland设置" tabindex="-1"><a class="header-anchor" href="#_2-2-goland设置"><span>2.2 Goland设置</span></a></h3><h4 id="_2-2-1-设置goroot" tabindex="-1"><a class="header-anchor" href="#_2-2-1-设置goroot"><span>2.2.1 设置GOROOT</span></a></h4><p>在安装完Goland后，首先需要设置GOROOT，用来编译运行Go代码。在Goland的settings配置起来十分方便。打开Settings → Go → GOROOT设置即可</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-1-设置go-modules" tabindex="-1"><a class="header-anchor" href="#_2-2-1-设置go-modules"><span>2.2.1 设置Go Modules</span></a></h4><p>Go1.14版本之后，Go项目推荐使用Go Modules来管理依赖，在Goland中要使用Go Modules，同样要把Go Modules设置开启，打开Settings → Go → Go Moudles，勾选打开即可</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-第一个go程序" tabindex="-1"><a class="header-anchor" href="#_3-第一个go程序"><span>3. 第一个Go程序</span></a></h2><p>按照惯例，环境搭建好之后，我们就来创建第一个Go程序：Hello World</p><h3 id="_3-1-命令行方式" tabindex="-1"><a class="header-anchor" href="#_3-1-命令行方式"><span>3.1 命令行方式</span></a></h3><ol><li>首先创建一个空的文件夹hello</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>进入到hello文件夹，将该文件夹初始化为一个go module项目</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd hello</span></span>
<span class="line"><span>go mod init hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完上述命令后，可以看到在hello文件夹下多出了一个go.mod文件，内容如下</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以查看下go.mod的文件内容，第一行表示module名为hello，go的版本为1.20</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>在hello文件夹创建一个main.go文件，文件内容如下：</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 声明 main 包，表明当前是一个可执行程序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 导入内置 fmt 包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main函数，是程序执行的入口</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在终端打印 Hello World!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在当前目录下执行以下命令，直接运行程序</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go run main.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到终端输出hello world。</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>也可以直接编译工程，然后在执行。在当前hello目录下执行</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行完会成成一个二进制的可执行文件hello,然后执行以下命令直接运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样可以看到终端输出hello world。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-1-goland方式" tabindex="-1"><a class="header-anchor" href="#_3-1-goland方式"><span>3.1 Goland方式</span></a></h3><h4 id="_3-1-1-新建go项目" tabindex="-1"><a class="header-anchor" href="#_3-1-1-新建go项目"><span>3.1.1 新建Go项目</span></a></h4><p>打开Goland应用，或者事在已经打开的Goland的最上方选择File → New → Project， 继而弹出New Project设置向导：</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击create创建完成，注意使用Goland创建完项目后，项目下自动就有go.mod文件</p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接着新建hello1.go文件，代码如下</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 导入内置 fmt 包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main函数，是程序执行的入口</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在终端打印 Hello World!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后直接点击运行，即可看到运行结果，打印出Hello World。</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-1-2-导入已有go项目" tabindex="-1"><a class="header-anchor" href="#_3-1-2-导入已有go项目"><span>3.1.2 导入已有Go项目</span></a></h4><p>如果你本地已有Go项目代码，只需在主菜单选择File → Open，打开你的项目目录即可。比如我们打开刚刚命令行方式常见的hello工程</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样可以直接运行，打印出Hello World</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',82)]))}const O=s(_,[["render",F],["__file","Go环境搭建.html.vue"]]),C=JSON.parse('{"path":"/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"Go环境搭建","lang":"zh-CN","frontmatter":{"tags":["Go","环境搭建"],"description":"Go环境搭建 Golang是云原生时代的宠儿，它最大的优点在于简单有效，简单在于上手迅速、代码规范、部署方便；有效在于它能很容易写出高并发的代码，处理能力强。 Golang能适用于web后台、数据库、云原生、区块链等大多数场景，大厂与其相关的招聘岗位也在逐年增加，因此，学习Golang这样相对较新、发展前景很好的语言，我们是可以实现弯道超车的。 本文环...","head":[["meta",{"property":"og:url","content":"https://xiucaistack.cn/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"秀才的进阶之路"}],["meta",{"property":"og:title","content":"Go环境搭建"}],["meta",{"property":"og:description","content":"Go环境搭建 Golang是云原生时代的宠儿，它最大的优点在于简单有效，简单在于上手迅速、代码规范、部署方便；有效在于它能很容易写出高并发的代码，处理能力强。 Golang能适用于web后台、数据库、云原生、区块链等大多数场景，大厂与其相关的招聘岗位也在逐年增加，因此，学习Golang这样相对较新、发展前景很好的语言，我们是可以实现弯道超车的。 本文环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-29T15:09:45.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"环境搭建"}],["meta",{"property":"article:modified_time","content":"2025-03-29T15:09:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go环境搭建\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-29T15:09:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"秀才\\",\\"url\\":\\"https://github.com/Percygu\\"}]}"]]},"headers":[{"level":2,"title":"1. 安装Golang","slug":"_1-安装golang","link":"#_1-安装golang","children":[{"level":3,"title":"1.1 Linux 安装方式","slug":"_1-1-linux-安装方式","link":"#_1-1-linux-安装方式","children":[]},{"level":3,"title":"1.2 Mac安装","slug":"_1-2-mac安装","link":"#_1-2-mac安装","children":[]},{"level":3,"title":"1.3 Windows安装","slug":"_1-3-windows安装","link":"#_1-3-windows安装","children":[]},{"level":3,"title":"1.4 GOPROXY设置","slug":"_1-4-goproxy设置","link":"#_1-4-goproxy设置","children":[]},{"level":3,"title":"1.5 GOPRIVATE设置","slug":"_1-5-goprivate设置","link":"#_1-5-goprivate设置","children":[]}]},{"level":2,"title":"2. Go开发编辑器","slug":"_2-go开发编辑器","link":"#_2-go开发编辑器","children":[{"level":3,"title":"2.1 Goland安装","slug":"_2-1-goland安装","link":"#_2-1-goland安装","children":[]},{"level":3,"title":"2.2 Goland设置","slug":"_2-2-goland设置","link":"#_2-2-goland设置","children":[]}]},{"level":2,"title":"3. 第一个Go程序","slug":"_3-第一个go程序","link":"#_3-第一个go程序","children":[{"level":3,"title":"3.1 命令行方式","slug":"_3-1-命令行方式","link":"#_3-1-命令行方式","children":[]},{"level":3,"title":"3.1 Goland方式","slug":"_3-1-goland方式","link":"#_3-1-goland方式","children":[]}]}],"git":{"createdTime":1739465420000,"updatedTime":1743260985000,"contributors":[{"name":"gupeng","username":"gupeng","email":"380059082@qq.com","commits":2,"url":"https://github.com/gupeng"}]},"readingTime":{"minutes":6.77,"words":2032},"filePathRelative":"Go语言系列/Go环境搭建/Go环境搭建.md","localizedDate":"2025年2月14日","autoDesc":true}');export{O as comp,C as data};
