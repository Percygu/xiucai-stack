import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-DJgFtDFQ.js";const t="/assets/0c8666c9f2a2a24045c7eb16c163a8e9-D6D_BxHP.png",l="/assets/cacc64449f25f934740cbdf201affbf3-BDBnbCZb.png",o="/assets/10a8fc3bc4fe8c3b2d23a0832aabb5f2-DG0XeeM7.png",d={};function r(p,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="sync面试题" tabindex="-1"><a class="header-anchor" href="#sync面试题"><span>Sync面试题</span></a></h1><h2 id="_1-除了-mutex-以外还有那些方式安全读写共享变量" tabindex="-1"><a class="header-anchor" href="#_1-除了-mutex-以外还有那些方式安全读写共享变量"><span>1. 除了 mutex 以外还有那些方式安全读写共享变量？</span></a></h2><p>除了Mutex，主要还有<strong>信号量</strong>、<strong>通道（Channel），原子操作（atomic）</strong>这几种方式。</p><p>信号量的实现其实跟mutex差不多，实现起来也很方便，主要通过信号量计数来保证。chanenl是Go最推崇的方式，它通过通信来传递数据所有权，从根源上避免竞争，更适合复杂的业务逻辑；而原子操作则针对最简单的整型或指针等进行无锁操作，性能最高，常用于实现计数器或状态位。选择哪种，完全取决于数据结构的复杂度和业务的读写模型。</p><h2 id="_2-go-语言是如何实现原子操作的" tabindex="-1"><a class="header-anchor" href="#_2-go-语言是如何实现原子操作的"><span>2. Go 语言是如何实现原子操作的？</span></a></h2><p>Go语言实现原子操作，其根本是<strong>依赖底层CPU硬件提供的原子指令</strong>，而不是通过操作系统或更上层的锁机制。</p><p>具体来说，Go的<code>sync/atomic</code>包中的函数，在编译时会被编译器识别，并直接转换成对应目标硬件平台（如x86、ARM）的单条原子机器指令。例如，在x86架构上，<code>atomic.AddInt64</code>这类操作会对应到像<code>LOCK; ADD</code>这样的指令。前面的<code>LOCK</code>前缀是关键，它会锁住总线或缓存行，确保后续的<code>ADD</code>指令在执行期间，其他CPU核心不能访问这块内存，从而保证了整个操作的原子性。</p><h2 id="_3-聊聊原子操作和锁的区别" tabindex="-1"><a class="header-anchor" href="#_3-聊聊原子操作和锁的区别"><span>3. <strong>聊聊原子操作和锁的区别？</strong></span></a></h2><p>原子操作和锁最核心的区别在于它们的<strong>实现层级</strong>和<strong>保护范围</strong>。</p><p><strong>原子操作</strong>是CPU硬件层面的“微观”机制，它保证对单个数据（通常是整型或指针）的单次读改写操作是绝对不可分割的，性能极高，因为它不涉及操作系统内核的介入和goroutine的挂起。</p><p><strong>锁</strong>则是操作系统或语言运行时提供的“宏观”机制，它保护的是一个<strong>代码块</strong>（临界区），而不仅仅是单个变量。当获取锁失败时，它会让goroutine休眠，而不是空耗CPU。虽然锁的开销远大于原子操作，但它能保护一段复杂的、涉及多个变量的业务逻辑。</p><p>所以，对于简单的计数器或标志位更新，用原子操作追求极致性能；而只要需要保护一段逻辑或多个变量的一致性，就必须用锁。</p><h2 id="_4-go语言互斥锁mutex底层是怎么实现的" tabindex="-1"><a class="header-anchor" href="#_4-go语言互斥锁mutex底层是怎么实现的"><span>4. Go语言互斥锁mutex底层是怎么实现的？</span></a></h2><p>mutex底层是通过原子操作加信号量来实现的，通过atomic 包中的一些原子操作来实现锁的锁定，通过信号量来实现协程的阻塞与唤醒</p><p><strong>分析</strong></p><p>互斥锁对应的是底层结构是sync.Mutex结构体</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mutex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  state</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  sema</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  uint32</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>state表示锁的状态，有锁定、被唤醒、饥饿模式等，并且是用state的二进制位来标识的，不同模式下会有不同的处理方式</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>sema表示信号量，mutex阻塞队列的定位是通过这个变量来实现的，从而实现goroutine的阻塞和唤醒</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-mutex-有几种模式" tabindex="-1"><a class="header-anchor" href="#_5-mutex-有几种模式"><span>5. Mutex 有几种模式？</span></a></h2><p>Go的<code>Mutex</code>主要有两种模式：<strong>正常模式（Normal Mode）和饥饿模式（Starvation Mode）</strong>。</p><ol><li><p><strong>正常模式</strong>：这是默认模式，讲究的是性能。新请求锁的goroutine会和等待队列头部的goroutine竞争，新来的goroutine有几次“自旋”的机会，如果在此期间锁被释放，它就可以直接抢到锁。这种方式吞吐量高，但可能会导致队列头部的goroutine等待很久，即“不公平”。</p></li><li><p><strong>饥饿模式</strong>：当一个goroutine在等待队列中等待超过1毫сан（1ms）后，Mutex就会切换到此模式，讲究的是公平。在此模式下，锁的所有权会直接从解锁的goroutine移交给等待队列的头部，新来的goroutine不会自旋，必须排到队尾。这样可以确保队列中的等待者不会被“饿死”。</p></li></ol><p>当等待队列为空，或者一个goroutine拿到锁时发现它的等待时间小于1ms，饥饿模式就会结束，切换回正常模式。这两种模式的动态切换，是Go在性能和公平性之间做的精妙平衡。</p><h2 id="_6-在mutex上自旋的goroutine-会占用太多资源吗" tabindex="-1"><a class="header-anchor" href="#_6-在mutex上自旋的goroutine-会占用太多资源吗"><span>6. 在Mutex上自旋的goroutine 会占用太多资源吗</span></a></h2><p>并不会，因为Go的自旋设计得非常“克制”和“智能”。</p><p>首先，自旋不是无休止的空转，它有严格的次数和时间限制，通常只持续几十纳秒。其次，自旋仅仅在特定条件下才会发生，比如CPU核数大于1，并且当前机器不算繁忙（没有太多goroutine在排队）。它是在赌，与其付出“goroutine挂起和唤醒”这种涉及内核调度的巨大代价，不如原地“稍等一下”，因为锁可能马上就释放了。</p><p>所以，这种自旋是一种机会主义的短线优化，目的是用极小的CPU开销去避免一次昂贵的上下文切换，在锁竞争不激烈、占用时间极短的场景下，它反而是<strong>节省</strong>了资源。</p><h2 id="_7-mutex-已经被一个-goroutine-获取了-其它等待中的-goroutine-们只能一直等待。那么等这个锁释放后-等待中的-goroutine-中哪一个会优先获取-mutex-呢" tabindex="-1"><a class="header-anchor" href="#_7-mutex-已经被一个-goroutine-获取了-其它等待中的-goroutine-们只能一直等待。那么等这个锁释放后-等待中的-goroutine-中哪一个会优先获取-mutex-呢"><span>7. Mutex 已经被一个 Goroutine 获取了, 其它等待中的 Goroutine 们只能一直等待。那么等这个锁释放后，等待中的 Goroutine 中哪一个会优先获取 Mutex 呢?</span></a></h2><p>取决于Mutex当前处于正常模式还是饥饿模式。</p><p>在<strong>正常模式</strong>下，锁的分配是“不公平”的。当锁被释放时，等待队列中的第一个goroutine会被唤醒，但它<strong>不一定</strong>能拿到锁。它需要和那些此刻刚刚到达、正在自旋的新goroutine进行竞争。新来的goroutine因为正在CPU上运行，很有可能“插队”成功，直接抢到锁。这种策略的优点是吞吐量高，但缺点是可能导致等待队列中的goroutine被饿死。</p><p>而一旦Mutex进入<strong>饥饿模式</strong>，锁的分配就变得“绝对公平”。锁被释放后，会直接移交给等待队列的队头goroutine，任何新来的goroutine都不会参与竞争，必须乖乖排到队尾。</p><h2 id="_8-sync-once-的作用是什么-讲讲它的底层实现原理" tabindex="-1"><a class="header-anchor" href="#_8-sync-once-的作用是什么-讲讲它的底层实现原理"><span>8. sync.Once 的作用是什么，讲讲它的底层实现原理？</span></a></h2><p><code>sync.Once</code>的作用是<strong>确保一个函数在程序生命周期内，无论在多少个goroutine中被调用，都只会被执行一次</strong>。它常用于单例对象的初始化或一些只需要执行一次的全局配置加载</p><p><code>sync.Once</code>保证代码段只执行1次的原理主要是其内部维护了一个标识位，当它 == 0 时表示还没执行过函数，此时会加锁修改标识位，然后执行对应函数。后续再执行时发现标识位 != 0，则不会再执行后续动作了</p><p><strong>分析</strong></p><p>Once其实是一个结构体</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Once</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    done</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 标识位</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    m</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Mutex</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心依赖一个<code>uint32</code>的<code>done</code>标志位和一个互斥锁<code>Mutex</code>，</p><p>当<code>Once.Do(f)</code>首次被调用时：</p><ol><li><p>它首先会通过原子操作（<code>atomic.LoadUint32</code>）快速检查<code>done</code>标志位。如果<code>done</code>为1，说明初始化已完成，直接返回，这个路径完全无锁，开销极小。</p></li><li><p>如果<code>done</code>为0，说明可能是第一次调用，这时它会进入一个慢路径（<code>doSlow</code>）。</p></li><li><p>在慢路径里，它会先<strong>加锁</strong>，然后<strong>再次检查</strong><code>done</code>标志位。这个“双重检查”（Double-Checked Locking）是关键，它防止了在多个goroutine同时进入慢路径时，函数<code>f</code>被重复执行。</p></li><li><p>如果此时<code>done</code>仍然为0，那么当前goroutine就会执行传入的函数<code>f</code>。执行完毕后，它会通过原子操作（<code>atomic.StoreUint32</code>）将<code>done</code>标志位置为1，最后<strong>解锁</strong>。</p></li></ol><p>之后任何再调用<code>Do</code>的goroutine，都会在第一步的原子<code>Load</code>操作时发现<code>done</code>为1而直接返回。整个过程结合了原子操作的速度和互斥锁的安全性，高效且线程安全地实现了“仅执行一次”的保证</p><h2 id="_9-waigroup-是怎样实现协程等待" tabindex="-1"><a class="header-anchor" href="#_9-waigroup-是怎样实现协程等待"><span>9. WaiGroup 是怎样实现协程等待？</span></a></h2><p><code>WaitGroup</code>实现等待，本质上是<strong>一个原子计数器和一个信号量的协作</strong>。</p><p>调用<code>Add</code>会增加计数值，<code>Done</code>会减计数值。而<code>Wait</code>方法会检查这个计数器，如果不为零，就利用信号量将当前goroutine高效地挂起。直到最后一个<code>Done</code>调用将计数器清零，它就会通过这个信号量，一次性唤醒所有在<code>Wait</code>处等待的goroutine，从而实现等待目的。</p><p><strong>分析：</strong></p><p>waitgroup的结构定义：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A WaitGroup waits for a collection of goroutines to finish.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The main goroutine calls Add to set the number of goroutines to wait for.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Then each of the goroutines runs and calls Done when finished. At the same</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// time, Wait can be used to block until all goroutines have finished.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// A WaitGroup must not be copied after first use.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WaitGroup</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        noCopy</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> noCopy</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 用于vet工具检查是否被复制</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 64位的值：高32位是计数器，低32位是等待的goroutine数量。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 通过原子操作访问，保存了状态和等待者数量。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        state</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> atomic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Uint64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 用于等待者休眠的信号量。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        sema</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>noCopy</code></strong>: 这是一个特殊的字段，用于静态分析工具（<code>go vet</code>）在编译时检查<code>WaitGroup</code>实例是否被复制。<code>WaitGroup</code>被复制后会导致状态不一致，可能引发程序错误，因此该字段的存在旨在防止此类问题的发生。</p><p><strong><code>state</code></strong>: 这是<code>WaitGroup</code>的核心，一个64位的无符号整型，通过<code>sync/atomic</code>包进行原子操作，以保证并发安全。这个64位的空间被巧妙地分成了两部分：</p><ul><li><p><strong>高32位</strong>: 作为<strong>计数器（counter）</strong>，记录了需要等待的 goroutine 的数量。</p></li><li><p><strong>低32位</strong>: 作为<strong>等待者计数器（waiter count）</strong>，记录了调用<code>Wait()</code>方法后被阻塞的 goroutine 的数量。</p></li></ul><p><strong><code>sema</code></strong>: 这是一个信号量，用于实现 goroutine 的阻塞和唤醒。当主 goroutine 调用<code>Wait()</code>方法且计数器不为零时，它会通过这个信号量进入休眠状态。当所有子 goroutine 完成任务后，会通过这个信号量来唤醒等待的主 goroutine。</p><h2 id="_10-讲讲sync-map的底层原理" tabindex="-1"><a class="header-anchor" href="#_10-讲讲sync-map的底层原理"><span>10. 讲讲sync.Map的底层原理</span></a></h2><p><code>sync.Map</code>的底层核心是<strong>“空间换时间”，</strong>通过两个Map（<code>read</code>和<code>dirty</code>）** 的冗余结构，实现“读写分离”，最终达到<strong>针对特定场景的“读”操作无锁优化</strong>。</p><p>它的<code>read</code>是一个只读的<code>map</code>，提供无锁的并发读取，速度极快。写操作则会先操作一个加了锁的、可读写的<code>dirty</code> map。当<code>dirty</code> map的数据积累到一定程度，或者<code>read</code> map中没有某个key时，<code>sync.Map</code>会将<code>dirty</code> map里的数据“晋升”并覆盖掉旧的<code>read</code> map，完成一次数据同步。</p><p><strong>分析：</strong></p><p><code>sync.Map</code>的结构定义</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   mu</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mutex</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             //  用于保护dirty字段的锁</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   read</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> atomic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 只读字段，其实际的数据类型是一个readOnly结构</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   dirty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}]</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">entry</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //需要加锁才能访问的map，其中包含在read中除了被expunged(删除)以外的所有元素以及新加入的元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   misses</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 计数器，记录在从read中读取数据的时候，没有命中的次数，当misses值等于dirty长度时，dirty提升为read</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>read</code>字段的类型是<code>atomic.Value</code>，但是在使用中里面其实存储的是<code>readOnly</code>结构，<code>readOnly</code>结构定义如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// readOnly is an immutable struct stored atomically in the Map.read field.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> readOnly</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   m</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}]</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">entry</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // key为任意可比较类型，value为entry指针</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   amended</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // amended为true，表明dirty中包含read中没有的数据，为false表明dirty中的数据在read中都存在</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>entry</code>这个结构:</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    p</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> unsafe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // p指向真正的value所在的地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_11-read-map和dirty-map之间有什么关联" tabindex="-1"><a class="header-anchor" href="#_11-read-map和dirty-map之间有什么关联"><span>11. read map和dirty map之间有什么关联？</span></a></h2><p>它们之间是<strong>“只读缓存”</strong>和<strong>“最新全集”</strong>的关联。</p><p><code>read</code> map是<code>dirty</code> map的一个不完全、且可能是过期的只读快照。<code>dirty</code> map则包含了所有的最新数据。</p><p>具体来说，<code>read</code> map中的所有数据，在<code>dirty</code> map里一定存在。一个key如果在<code>read</code> map里，那它的value要么就是最终值，要么就是一个特殊指针，指向<code>dirty</code> map里对应的条目。而<code>dirty</code> map里有，<code>read</code> map里却可能没有，因为<code>dirty</code>是最新、最全的。</p><p>当<code>dirty</code> map积累了足够多的新数据后，它会“晋升”为新的<code>read</code> map，旧的<code>read</code> map则被废弃。这个过程，就完成了“缓存”的更新。</p><h2 id="_12-为什么要设计nil和expunged两种删除状态" tabindex="-1"><a class="header-anchor" href="#_12-为什么要设计nil和expunged两种删除状态"><span>12. 为什么要设计nil和expunged两种删除状态？</span></a></h2><p>设计<code>nil</code>和<code>expunged</code>这两个状态，是为了解决<strong>在<code>sync.Map</code>的“读写分离”架构下，如何高效、无锁地处理“删除”操作</strong>。</p><p>因为<code>read</code> map本身是只读的，我们不能直接从中删除一个key。所以，当用户调用<code>Delete</code>时，如果这个key只存在于<code>read</code> map中，系统并不会真的删除它，而是将它的值标记为一个特殊的“已删除”状态，这个状态就是<code>expunged</code>。后续的读操作如果看到这个<code>expunged</code>标记，就知道这个key其实已经不存在了，直接返回<code>nil, false</code>。</p><p>而<code>nil</code>则是一个中间状态，主要用于<code>dirty</code> map和<code>read</code> map的同步过程，表示这个key正在被删除或迁移。</p><p>简单来说，这两个状态就像是在只读的<code>read</code> map上打的“逻辑删除”补丁。它避免了因为一次<code>Delete</code>操作就引发加锁和map的整体复制，把真正的物理删除延迟到了<code>dirty</code> map“晋升”为<code>read</code> map的那一刻，是典型的用状态标记来换取无锁性能的设计。</p><h2 id="_13-sync-map-适用的场景" tabindex="-1"><a class="header-anchor" href="#_13-sync-map-适用的场景"><span>13. sync.Map 适用的场景？</span></a></h2><p><code>sync.Map</code>适合读多写少的场景，而不是和写多读少的场景。</p><p>因为我们期望将更多的流量在read map这一层进行拦截，从而避免加锁访问dirty map<br> 对于更新，删除，读取，read map可以尽量通过一些原子操作，让整个操作变得无锁化，这样就可以避免进一步加锁访问dirty map。倘若写操作过多，sync.Map 基本等价于一把互斥锁 + map，其读写效率会大大下降</p>',77)]))}const k=s(d,[["render",r],["__file","Sync面试题.html.vue"]]),g=JSON.parse('{"path":"/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/Sync%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Sync面试题","lang":"zh-CN","frontmatter":{"tags":["Go","golang","sync","面试题","sync面试题"],"description":"Sync面试题 1. 除了 mutex 以外还有那些方式安全读写共享变量？ 除了Mutex，主要还有信号量、通道（Channel），原子操作（atomic）这几种方式。 信号量的实现其实跟mutex差不多，实现起来也很方便，主要通过信号量计数来保证。chanenl是Go最推崇的方式，它通过通信来传递数据所有权，从根源上避免竞争，更适合复杂的业务逻辑；而...","head":[["meta",{"property":"og:url","content":"https://xiucaistack.cn/Go%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97/Go%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/Sync%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"秀才的进阶之路"}],["meta",{"property":"og:title","content":"Sync面试题"}],["meta",{"property":"og:description","content":"Sync面试题 1. 除了 mutex 以外还有那些方式安全读写共享变量？ 除了Mutex，主要还有信号量、通道（Channel），原子操作（atomic）这几种方式。 信号量的实现其实跟mutex差不多，实现起来也很方便，主要通过信号量计数来保证。chanenl是Go最推崇的方式，它通过通信来传递数据所有权，从根源上避免竞争，更适合复杂的业务逻辑；而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T15:42:17.000Z"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"sync"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:tag","content":"sync面试题"}],["meta",{"property":"article:modified_time","content":"2025-06-26T15:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sync面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-26T15:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"秀才\\",\\"url\\":\\"https://github.com/Percygu\\"}]}"]]},"headers":[{"level":2,"title":"1. 除了 mutex 以外还有那些方式安全读写共享变量？","slug":"_1-除了-mutex-以外还有那些方式安全读写共享变量","link":"#_1-除了-mutex-以外还有那些方式安全读写共享变量","children":[]},{"level":2,"title":"2. Go 语言是如何实现原子操作的？","slug":"_2-go-语言是如何实现原子操作的","link":"#_2-go-语言是如何实现原子操作的","children":[]},{"level":2,"title":"3. 聊聊原子操作和锁的区别？","slug":"_3-聊聊原子操作和锁的区别","link":"#_3-聊聊原子操作和锁的区别","children":[]},{"level":2,"title":"4. Go语言互斥锁mutex底层是怎么实现的？","slug":"_4-go语言互斥锁mutex底层是怎么实现的","link":"#_4-go语言互斥锁mutex底层是怎么实现的","children":[]},{"level":2,"title":"5. Mutex 有几种模式？","slug":"_5-mutex-有几种模式","link":"#_5-mutex-有几种模式","children":[]},{"level":2,"title":"6. 在Mutex上自旋的goroutine 会占用太多资源吗","slug":"_6-在mutex上自旋的goroutine-会占用太多资源吗","link":"#_6-在mutex上自旋的goroutine-会占用太多资源吗","children":[]},{"level":2,"title":"7. Mutex 已经被一个 Goroutine 获取了, 其它等待中的 Goroutine 们只能一直等待。那么等这个锁释放后，等待中的 Goroutine 中哪一个会优先获取 Mutex 呢?","slug":"_7-mutex-已经被一个-goroutine-获取了-其它等待中的-goroutine-们只能一直等待。那么等这个锁释放后-等待中的-goroutine-中哪一个会优先获取-mutex-呢","link":"#_7-mutex-已经被一个-goroutine-获取了-其它等待中的-goroutine-们只能一直等待。那么等这个锁释放后-等待中的-goroutine-中哪一个会优先获取-mutex-呢","children":[]},{"level":2,"title":"8. sync.Once 的作用是什么，讲讲它的底层实现原理？","slug":"_8-sync-once-的作用是什么-讲讲它的底层实现原理","link":"#_8-sync-once-的作用是什么-讲讲它的底层实现原理","children":[]},{"level":2,"title":"9. WaiGroup 是怎样实现协程等待？","slug":"_9-waigroup-是怎样实现协程等待","link":"#_9-waigroup-是怎样实现协程等待","children":[]},{"level":2,"title":"10. 讲讲sync.Map的底层原理","slug":"_10-讲讲sync-map的底层原理","link":"#_10-讲讲sync-map的底层原理","children":[]},{"level":2,"title":"11. read map和dirty map之间有什么关联？","slug":"_11-read-map和dirty-map之间有什么关联","link":"#_11-read-map和dirty-map之间有什么关联","children":[]},{"level":2,"title":"12. 为什么要设计nil和expunged两种删除状态？","slug":"_12-为什么要设计nil和expunged两种删除状态","link":"#_12-为什么要设计nil和expunged两种删除状态","children":[]},{"level":2,"title":"13. sync.Map 适用的场景？","slug":"_13-sync-map-适用的场景","link":"#_13-sync-map-适用的场景","children":[]}],"git":{"createdTime":1750952537000,"updatedTime":1750952537000,"contributors":[{"name":"gupeng","username":"gupeng","email":"380059082@qq.com","commits":1,"url":"https://github.com/gupeng"}]},"readingTime":{"minutes":12.23,"words":3669},"filePathRelative":"Go语言系列/Go面试题库/Sync面试题.md","localizedDate":"2025年6月26日","autoDesc":true}');export{k as comp,g as data};
