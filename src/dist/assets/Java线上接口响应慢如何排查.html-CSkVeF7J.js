import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-DJgFtDFQ.js";const h="/assets/java%E5%93%8D%E5%BA%94%E6%85%A2%E6%8E%92%E6%9F%A5%E8%B7%AF%E5%BE%84-DDDdWrV5.png",t="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A21-B8nd0L8p.png",e="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A22-BEMumQXx.png",k="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A23-56Z9xpwu.png",p="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A24-C0SXMjpK.png",d="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A25-DJ0v9hwn.png",r="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A26-CP1RNjMF.png",g="/assets/java%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A27-Dwm3yQv_.png",A={};function c(B,i){return l(),a("div",null,i[0]||(i[0]=[n('<h1 id="java线上接口响应慢如何排查" tabindex="-1"><a class="header-anchor" href="#java线上接口响应慢如何排查"><span>Java线上接口响应慢如何排查</span></a></h1><p>线上接口响应慢可以说是比进程突然挂掉更常见的问题了，在影响上它可能不会像进程中断那样严重，导致整个服务不可用。虽然影响面小，但是由于大量的请求延迟，会给用户的体验带来严重的影响。所以，针对线上接口响应慢问题的排查与处理也是我们需要重点掌握的。这篇文章将会系统介绍一些常见的导致线上接口响应慢的原因及排查手段</p><h2 id="_1-接口性能问题排查路径" tabindex="-1"><a class="header-anchor" href="#_1-接口性能问题排查路径"><span>1. 接口性能问题排查路径</span></a></h2><p>接口的性能受很多因素的影响，抛开系统问题不谈，比如单纯的流量激增，请求过多都会导致性能下降，接口响应变慢。另外数据库层面的慢查询，业务层面的代码逻辑错误以及服务器资源问题都会导致接口响应慢。对于慢接口常见的排查点如下图：</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-业务代码排查" tabindex="-1"><a class="header-anchor" href="#_2-业务代码排查"><span>2. 业务代码排查</span></a></h2><p>业务代码的实现在很大程度上也决定着程序的性能问题，一份优雅的业务代码，其性能自然会高不少。对于比较复杂的业务逻辑，由于流程非常多，在业务代码中往往会出现循环调用和顺序调用的情况，这两种实现再很大程度上会影响程序的性能，并且这两种实现方式是可以优化的</p><h3 id="_2-1-循环调用" tabindex="-1"><a class="header-anchor" href="#_2-1-循环调用"><span>2.1 循环调用</span></a></h3><p>循环调用不是说代码中所有循环里的逻辑都有问题，而是说对于循环里每次调用的逻辑几乎一样，前后又毫无关联的逻辑往往是可以优化的，比如下列代码逻辑，需要循环调用<code>processData</code>函数处生成30个<code>Data</code>类型的数据然后添加到<code>list</code>数组中</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Data</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(i)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 计算30个Data类型的数据，添加到list数组中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(date);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，这里每个数据的生成都是相互独立的，完全可以采用多线程方式进行优化</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 建立一个线程池，并行处理上述process逻辑</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> commonThreadPool </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> commonThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DiscardPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 开始多线程调用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> futures </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> commonThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    futures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(future);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 从futures获取结果添加到list中</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> futures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">futures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;error：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, e);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-顺序调用" tabindex="-1"><a class="header-anchor" href="#_2-2-顺序调用"><span>2.2 顺序调用</span></a></h3><p>除了循环调用之外，有的业务逻辑本身很复杂，需要涉及多个调用过程，如果每个接口都串行的顺序调用的话，性能必然不好，其实这种情况下钱也可以用多线程的方式进行，例如：</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码逻辑可以简单表示如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcA</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcB</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">C</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcC</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">D</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(c)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> e </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(c)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcResult</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的逻辑其实可以用<code>CompletableFuture</code>来进行优化：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> futureA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> futureB </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(futureA,futureB)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 等funcA()和funcB()两个并行任务都执行完成，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">C</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcC</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">futureA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> futureB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">D</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> futureD </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> futureE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> funcE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(futureD,futureE)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 等funcD()和funE()两个并行任务都执行完成，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doResult</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">futureD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">futureE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在原来的逻辑中，<code>funcA()</code>和<code>funcB()</code>是串行执行的，<code>funcD()</code>和<code>funE()</code>也是串行执行的，优化之后，<code>funcA()</code>和<code>funcB()</code>变成并行执行的，<code>funcD()</code>和<code>funE()</code>也是并行的。最大执行时间就只取决于并行的哪个逻辑更慢了，而不会是运行时间的叠加了</p><h3 id="_2-3-线程池设计不合理" tabindex="-1"><a class="header-anchor" href="#_2-3-线程池设计不合理"><span>2.3 线程池设计不合理</span></a></h3><p>线程池一般被我们用作逻辑并行优化的主要手段，但是线程池的设计不合理同样会使程序的执行效率很慢。线程池有三个重要参数：核心线程数、最大线程数、等待队列。回顾一下线程池的处理逻辑：</p><ol><li>线程池初始创建后，里面的线程数为0，当有任务提交的时候，开始创建和核心线程</li></ol><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>如果核心线程满了，只有任务提交的话，则任务会进入到等待队列</li></ol><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>如果等待队列也满了，线程池开始创建非核心线程</li></ol><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>如果线程池里的线程总数达到了最大线程数，还有任务继续提交的话，任务会阻塞</li></ol><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>线程池导致性能问题主要有以下几种情况：</p><ul><li>核心线程设置过小，没有达到并行的效果</li><li>一个线程池有多个业务公用，非核心业务占据了大量的线程，导致主线任务工作线程不足</li><li>任务过多，线程池里的线程被占满，大量任务阻塞</li></ul><h3 id="_2-4-锁设计不合理" tabindex="-1"><a class="header-anchor" href="#_2-4-锁设计不合理"><span>2.4 锁设计不合理</span></a></h3><p>程序中的锁设计不合理同样会导致性能低下，设计不合理的锁一般是以下两种情况：</p><h4 id="_2-4-1-锁类型不合理" tabindex="-1"><a class="header-anchor" href="#_2-4-1-锁类型不合理"><span>2.4.1 锁类型不合理</span></a></h4><p>在一般的编程语言中，提供的锁一般都有互斥锁和读写锁两种，读写锁就是读可以共享，而写互斥，互斥锁就是在任何场景下都是互斥的，所以加互斥锁的性能会更差。所以在可以加读写锁的时候，如果我们加成了互斥锁，那么在读远远多于写的场景下，效率会极大降低程序运行效率。</p><h4 id="_2-4-2-锁粒度太粗" tabindex="-1"><a class="header-anchor" href="#_2-4-2-锁粒度太粗"><span>2.4.2 锁粒度太粗</span></a></h4><p>锁粒度过粗是另一种常见的锁设计不合理导致程序性能差的情况，通常把锁包裹的范围过大，使得加锁时间会过长，比如一下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doJob</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processlData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    copyFile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(f)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码逻辑有三个主要的阶段任务，计算数据，拷贝文件，最后发送消息。直观上来说，处理数据这里可能涉及到并发问题，而拷贝文件以及发送消息都是后续工作了，完全可以不加锁。这里的枷锁范围就可以优化，完全可以改成：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSome</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processlData</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    copyFile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(f)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-数据库排查" tabindex="-1"><a class="header-anchor" href="#_3-数据库排查"><span>3. 数据库排查</span></a></h2><p>除了业务代码外，另一个非常常见的影响后端接口性能的问题就是数据库问题了。涉及到数据库导致的性能问题，有很多个方面，下面大致做了个不完全总结</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-1-深分页问题" tabindex="-1"><a class="header-anchor" href="#_3-1-深分页问题"><span>3.1 深分页问题</span></a></h3><p>mysql的分页查询一般使用<code>limit</code>查询语句来完成，比如查询一张<code>student</code>表里查<code>100</code>到<code>120</code>这<code>20</code>条数据</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">limit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>mysql会把前<code>120</code>条数据都查出来，抛弃前<code>100</code>条，返回<code>2</code>0条，这里查询<code>120</code>条数据，mysql性能不会有什么问题，但是当分页深度变得越来越大，比如达到<code>100w</code>的时候。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">limit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样mysql会查出来<code>1000020</code>条数据，抛弃<code>1000000</code>条，速度必然很慢。这里可以做一个优化，直接查询<code>id&gt;1000000</code>的数据，然后取<code>20</code>条即可</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> limit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，mysql会走主键索引，直接找到<code>1000000</code>处，然后查出来<code>20</code>条数据，效率会高得多</p><h3 id="_3-2-未加索引" tabindex="-1"><a class="header-anchor" href="#_3-2-未加索引"><span>3.2 未加索引</span></a></h3><p>这个可以借助mysql提供的<code>explain</code>工具来排查，看下接口设计的到sql语句查询有没有走索引，关于<code>explain</code>的分析，这里就不再赘述。</p><h3 id="_3-3-索引失效" tabindex="-1"><a class="header-anchor" href="#_3-3-索引失效"><span>3.3 索引失效</span></a></h3><p>比起未加索引，索引失效的的情况更加复杂，排查起来也更困难一些。同样可以通过<code>explain</code>来查看索引是否生效，然后采取对应措施，下面总结了一些常见的索引失效的场景</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关于具体的索引失效的sql这里就不再赘述，这里主要讲一下索引失效的第一个点，就是字段区分性差，什么是字段区分性差呢？可以按照以下3种情况来理解</p><ol><li>字段值少，比如一个性别字段，总共只有两个值，那这个字段的索引区分度就很低</li><li>某个字段大量为空，只有少量有值，这个字段的区分度也很低</li><li>字段值太集中，比如一个字段值90%都是1，剩下10%可能是其他值，区分度也很低</li></ol><p>所以在建立索引的时候，最好不要建立在区分度低的字段上，这样会导致索引失效</p><h3 id="_3-4-join查询过多" tabindex="-1"><a class="header-anchor" href="#_3-4-join查询过多"><span>3.4 join查询过多</span></a></h3><p><code>join</code>查询其实可以用来优化子查询，一般来说，在sql中大量使用子查询是不推荐的，因为执行子查询时，MySQL 需要为内层查询语句的查询结果建立一个临时表，然后外层查询语句从临时表中查询记录。 查询完毕后，再撤销这些临时表。 这样会消耗过多的CPU 和IO资源。所以子查询一般都建议优化成<code>join</code>来查询<br> 即便优化成<code>join</code>查询了，<code>join</code>关联的表也不宜过多，如果表的数据量很大，一般来说2-3张表就可以了。<code>join</code>操作其实也是在内存去做的，所以关联的数据量不宜过大，同时<code>join_buffer</code>也要适当设置的大一些，这样效率就高一些。相反，如果<code>join</code>的数据量太大，mysql会采用在硬盘上创建临时表的方式进行多张表的关联匹配，显然这就涉及到磁盘IO了，效率就会低的多<br> 如果在业务中的查询一定要涉及到多个表，而且数据量很大，那么最好的方式就是在业务层把查询拆成个子查询，然后在业务层取做聚合拼装，这样效率反而更高</p><h3 id="_3-5-表数据量过大" tabindex="-1"><a class="header-anchor" href="#_3-5-表数据量过大"><span>3.5 表数据量过大</span></a></h3><p>再索引以及sql都没有明显问题的情况下，查询还是很慢的话，那有可能就是表的数据量本身就太大了，导致的数据库性能降低。这个时候单表已经不足以支撑起这么大的数据量了，我们要么做数据迁移，将数据迁移到分布式的数据库中，要么就需要做分库分表了。关于分库分表的具体方案选择这里不做赘述</p><h2 id="_4-系统资源问题" tabindex="-1"><a class="header-anchor" href="#_4-系统资源问题"><span>4. 系统资源问题</span></a></h2><p>除了程序本身以及数据库的影响外，另外，机器本身的资源瓶颈也是导致我们程序性能低下的一个重要因素。比如java程序中由于代码问题导致陈旭频繁的发生fullGC，或者是代码存在线程泄露引起RSS内存占用过高进而引起机器反应慢，又或者是由于网络延迟导致rpc调用一致处于等待，等待诸多原因都可能导致接口响应变慢。这些都需要借助监控以及日志来进行逐一排查，具体问题具体分析</p><h2 id="_5-通用解决方案" tabindex="-1"><a class="header-anchor" href="#_5-通用解决方案"><span>5. 通用解决方案</span></a></h2><p>上面讲了这么多导致接口响应变慢的具体原因，除了具体问题具体分析外，那有没有一些通用的可以考虑到的解决方案能够解决大部分的业务接口慢的方法呢？其实是有的，排除了具体的问题以外，没有程序以及数据库故障，单纯的数据量大导致的接口响应慢依旧是我们需要优化的重点，这里有两个通用的方法</p><h3 id="_5-1-加缓存" tabindex="-1"><a class="header-anchor" href="#_5-1-加缓存"><span>5.1 加缓存</span></a></h3><p>在读接口的优化上来说，缓存是优化读接口的一个万金油方法。缓存又可以做中间件缓存和本地缓存，所有的读压力大，都可以借助缓存来优化，一级不够，可以做多级优化，先用redis做一层db纬度的优化，如果性能还是不够，可以在本地再做一层本地缓存，继续加快读取速度</p><h3 id="_5-2-异步化" tabindex="-1"><a class="header-anchor" href="#_5-2-异步化"><span>5.2 异步化</span></a></h3><p>通常我们的业务接口可能会包含多个流程，如果是同步的方式，我们需要等到最后数据写入成功后才会返回结果，如果流量压力很大并且流程很长的情况下很定会导致写入性能非常差，这里我们可以将写过程做异步化处理。到了写流程这里先返回响应，然后通过异步方式写入，如果有必要知道结果的话，可以做个回调通知</p><h2 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结"><span>6. 小结</span></a></h2><p>接口响应慢也是一个较为宽泛的问题，排查起来也要涉及多个方面，比如数据库问题，程序代码问题，包括服务器的资源瓶颈等等都要考虑到。也有可能只是单纯的数据量过大导致的接口响应慢，总之，在具体的接口问题面前要具体分析，找到对应的优化手段</p>',74)]))}const E=s(A,[["render",c],["__file","Java线上接口响应慢如何排查.html.vue"]]),F=JSON.parse('{"path":"/%E5%90%8E%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/%E9%9D%A2%E8%AF%95%E5%9C%BA%E6%99%AF%E9%A2%98/Java%E7%BA%BF%E4%B8%8A%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A2%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5.html","title":"Java线上接口响应慢如何排查","lang":"zh-CN","frontmatter":{"description":"Java线上接口响应慢如何排查 线上接口响应慢可以说是比进程突然挂掉更常见的问题了，在影响上它可能不会像进程中断那样严重，导致整个服务不可用。虽然影响面小，但是由于大量的请求延迟，会给用户的体验带来严重的影响。所以，针对线上接口响应慢问题的排查与处理也是我们需要重点掌握的。这篇文章将会系统介绍一些常见的导致线上接口响应慢的原因及排查手段 1. 接口性能...","head":[["meta",{"property":"og:url","content":"https://xiucaistack.cn/%E5%90%8E%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/%E9%9D%A2%E8%AF%95%E5%9C%BA%E6%99%AF%E9%A2%98/Java%E7%BA%BF%E4%B8%8A%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%85%A2%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5.html"}],["meta",{"property":"og:site_name","content":"秀才的进阶之路"}],["meta",{"property":"og:title","content":"Java线上接口响应慢如何排查"}],["meta",{"property":"og:description","content":"Java线上接口响应慢如何排查 线上接口响应慢可以说是比进程突然挂掉更常见的问题了，在影响上它可能不会像进程中断那样严重，导致整个服务不可用。虽然影响面小，但是由于大量的请求延迟，会给用户的体验带来严重的影响。所以，针对线上接口响应慢问题的排查与处理也是我们需要重点掌握的。这篇文章将会系统介绍一些常见的导致线上接口响应慢的原因及排查手段 1. 接口性能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T15:42:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-26T15:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java线上接口响应慢如何排查\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-26T15:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"秀才\\",\\"url\\":\\"https://github.com/Percygu\\"}]}"]]},"headers":[{"level":2,"title":"1. 接口性能问题排查路径","slug":"_1-接口性能问题排查路径","link":"#_1-接口性能问题排查路径","children":[]},{"level":2,"title":"2. 业务代码排查","slug":"_2-业务代码排查","link":"#_2-业务代码排查","children":[{"level":3,"title":"2.1 循环调用","slug":"_2-1-循环调用","link":"#_2-1-循环调用","children":[]},{"level":3,"title":"2.2 顺序调用","slug":"_2-2-顺序调用","link":"#_2-2-顺序调用","children":[]},{"level":3,"title":"2.3 线程池设计不合理","slug":"_2-3-线程池设计不合理","link":"#_2-3-线程池设计不合理","children":[]},{"level":3,"title":"2.4 锁设计不合理","slug":"_2-4-锁设计不合理","link":"#_2-4-锁设计不合理","children":[]}]},{"level":2,"title":"3. 数据库排查","slug":"_3-数据库排查","link":"#_3-数据库排查","children":[{"level":3,"title":"3.1 深分页问题","slug":"_3-1-深分页问题","link":"#_3-1-深分页问题","children":[]},{"level":3,"title":"3.2 未加索引","slug":"_3-2-未加索引","link":"#_3-2-未加索引","children":[]},{"level":3,"title":"3.3 索引失效","slug":"_3-3-索引失效","link":"#_3-3-索引失效","children":[]},{"level":3,"title":"3.4 join查询过多","slug":"_3-4-join查询过多","link":"#_3-4-join查询过多","children":[]},{"level":3,"title":"3.5 表数据量过大","slug":"_3-5-表数据量过大","link":"#_3-5-表数据量过大","children":[]}]},{"level":2,"title":"4. 系统资源问题","slug":"_4-系统资源问题","link":"#_4-系统资源问题","children":[]},{"level":2,"title":"5. 通用解决方案","slug":"_5-通用解决方案","link":"#_5-通用解决方案","children":[{"level":3,"title":"5.1 加缓存","slug":"_5-1-加缓存","link":"#_5-1-加缓存","children":[]},{"level":3,"title":"5.2 异步化","slug":"_5-2-异步化","link":"#_5-2-异步化","children":[]}]},{"level":2,"title":"6. 小结","slug":"_6-小结","link":"#_6-小结","children":[]}],"git":{"createdTime":1739465420000,"updatedTime":1750952537000,"contributors":[{"name":"gupeng","username":"gupeng","email":"380059082@qq.com","commits":2,"url":"https://github.com/gupeng"}]},"readingTime":{"minutes":11.77,"words":3531},"filePathRelative":"后端进阶之路/面试场景题/Java线上接口响应慢如何排查.md","localizedDate":"2025年2月14日","autoDesc":true}');export{E as comp,F as data};
